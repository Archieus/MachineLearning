install.packages(c("BH", "chron", "colorspace", "cubature", "curl", "DEoptimR", "digest", "evaluate", "ggplot2", "git2r", "htmlwidgets", "jsonlite", "kernlab", "knitr", "mnormt", "multicool", "openssl", "quantmod", "R6", "Rcpp", "RcppArmadillo", "reshape2", "rgl", "rneos", "robustbase", "scales", "shiny", "slam", "stringi", "tseries", "XML", "yaml", "zoo"))
install.packages(c("chron", "curl", "DBI", "digest", "expm", "gss", "jsonlite", "ks", "mvtnorm", "Rcpp", "RcppArmadillo", "rgl", "Rsymphony", "sn", "stringi", "stringr", "tseries"))
install.packages(c("assertthat", "Boom", "BoomSpikeSlab", "bsts", "CausalImpact", "cubature", "curl", "DBI", "devtools", "expm", "formatR", "htmltools", "jsonlite", "knitr", "markdown", "memoise", "quantmod", "R6", "RcppArmadillo", "Rglpk", "shiny", "sourcetools", "stringi", "tibble", "tseries", "XML", "zoo"))
devtools::install_github("joshuaulrich/quantmod", ref="157_yahoo_502")
devtools::install_github("joshuaulrich/quantmod", ref="157_yahoo_502")
devtools::install_github("joshuaulrich/quantmod", ref="157_yahoo_502")
library(Quantmod)
install.packages(c("DBI", "devtools", "dplyr", "jsonlite", "quantmod", "R6", "RcppArmadillo", "tseries", "XML"))
install.packages(c("BH", "car", "caret", "CausalImpact", "cubature", "curl", "devtools", "dplyr", "ecodist", "energy", "git2r", "gridExtra", "htmlwidgets", "httpuv", "httr", "knitr", "ks", "lme4", "openssl", "pbapply", "Rcpp", "RcppArmadillo", "rlang", "rstudioapi", "Rsymphony", "scales", "shiny", "tibble", "TTR", "withr", "xts"))
setwd("C:/Users/Rodney/Dropbox/Performance Analytic/Causation")
source('C:/Users/Rodney/Dropbox/Performance Analytic/Causation/AUD-EEM Causal-Cointegration.R', echo=TRUE)
setwd("C:/Users/Rodney/Dropbox/Performance Analytic/MachineLearning")
source('C:/Users/Rodney/Dropbox/Performance Analytic/MachineLearning/ML-Eurodollar.R', echo=TRUE)
#####################################
pred.model <- svm(State~., LiveData, probability = TRUE)
predict(pred.model, LiveData[,1:2], probability = TRUE)
View(LiveData)
predict(pred.model, LiveData[,1:3], probability = TRUE)
last(predict(pred.model, LiveData[,1:3], probability = TRUE))
tail(predict(pred.model, LiveData[,1:3], probability = TRUE))
last(attr("probabilities"))
View(LiveData)
predict(pred.model, LiveData[,1:3], probability = TRUE)['2017']
predict(pred.model, LiveData[,1:3], probability = TRUE)['2017-11']
View(DGS3MO)
